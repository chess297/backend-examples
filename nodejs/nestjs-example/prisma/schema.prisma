generator client {
  provider = "prisma-client-js"
  output   = "./clients/postgresql"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

// 用户表
model User {
  id        String    @id(map: "user_pk") @unique @map("id") @db.VarChar(36)
  name      String    @db.VarChar(50)
  email     String    @unique
  password  String    @db.VarChar(255)
  profile   Profile?
  tasks     Task[]
  roles     Role[]
  create_at DateTime  @default(dbgenerated("NOW()")) @map("create_at") @db.Timestamptz()
  update_at DateTime  @default(dbgenerated("NOW()")) @map("update_at") @db.Timestamptz()
  delete_at DateTime? @map("delete_at") @db.Timestamptz()

  @@map("users")
}

// 用户信息表
model Profile {
  id           String    @id(map: "profile_pk") @unique @map("id") @db.VarChar(36)
  user_id      String    @unique @db.VarChar(36)
  user         User      @relation(fields: [user_id], references: [id])
  phone        String    @map("phone") @db.VarChar(20)
  country_code String    @map("country_code") @db.VarChar(5)
  address      String    @db.VarChar(255)
  create_at    DateTime  @default(dbgenerated("NOW()")) @map("create_at") @db.Timestamptz()
  update_at    DateTime  @default(dbgenerated("NOW()")) @map("update_at") @db.Timestamptz()
  delete_at    DateTime? @map("delete_at") @db.Timestamptz()

  @@unique([user_id, phone, country_code])
  @@index([user_id], map: "profile_user_id_idx")
  @@map("profiles")
}

// 角色表
model Role {
  id          String       @id @db.VarChar(36)
  name        String       @unique @db.VarChar(255)
  description String       @db.VarChar(255)
  users       User[]
  permissions Permission[]
  create_at   DateTime     @default(dbgenerated("NOW()")) @map("create_at") @db.Timestamptz()
  update_at   DateTime     @default(dbgenerated("NOW()")) @map("update_at") @db.Timestamptz()
  delete_at   DateTime?    @map("delete_at") @db.Timestamptz()

  @@map("roles")
}


enum PermissionAction {
  manage
  create
  update
  delete
  read
}

// 权限表
model Permission {
  id          String             @id(map: "permission_pk") @unique @map("id") @db.VarChar(36)
  name        String             @db.VarChar(255) // 权限名称
  actions     PermissionAction[] // 操作，例如："create", "update", "delete", "read"
  resource    String             @db.VarChar(255) // 资源，例如："users", "posts"
  description String             @db.VarChar(255)
  roles       Role[]
  create_at   DateTime           @default(dbgenerated("NOW()")) @map("create_at") @db.Timestamptz()
  update_at   DateTime           @default(dbgenerated("NOW()")) @map("update_at") @db.Timestamptz()
  delete_at   DateTime?          @map("delete_at") @db.Timestamptz()
  // 关联的菜单
  menus       Menu[]
  menu_groups MenuGroup[]

  @@map("permissions")
}


model Task {
  id          String    @id @map("id") @db.VarChar(36)
  title       String    @db.VarChar(255)
  description String    @db.VarChar(255)
  completed   Boolean   @default(false)
  creator_id  String?   @unique @db.VarChar(36)
  creator     User?     @relation(fields: [creator_id], references: [id])
  create_at   DateTime  @default(dbgenerated("NOW()")) @map("create_at") @db.Timestamptz()
  update_at   DateTime  @default(dbgenerated("NOW()")) @map("update_at") @db.Timestamptz()
  delete_at   DateTime? @map("delete_at") @db.Timestamptz()

  @@map("tasks")
}

// 菜单表
model Menu {
  id          String       @id @unique @map("id") @db.VarChar(36)
  parent_id   String?      @map("parent_id") @db.VarChar(36)
  parent      Menu?        @relation("MenuParent", fields: [parent_id], references: [id])
  children    Menu[]       @relation("MenuParent")
  mate        MenuMate?      
  groups       MenuGroup[]  
  permissions Permission[]
  create_at   DateTime     @default(dbgenerated("NOW()")) @map("create_at") @db.Timestamptz()
  update_at   DateTime     @default(dbgenerated("NOW()")) @map("update_at") @db.Timestamptz()
  delete_at   DateTime?    @map("delete_at") @db.Timestamptz()

  @@map("menus")
}

// 菜单元数据表
model MenuMate {
  id        String @id @unique @map("id") @db.VarChar(36)
  menu_id   String @unique @map("menu_id") @db.VarChar(36)
  menu      Menu   @relation(fields: [menu_id], references: [id])
  title     String @db.VarChar(255)
  path      String @unique @db.VarChar(255)
  icon      String @db.VarChar(255)
  component String @db.VarChar(255)

  create_at DateTime  @default(dbgenerated("NOW()")) @map("create_at") @db.Timestamptz()
  update_at DateTime  @default(dbgenerated("NOW()")) @map("update_at") @db.Timestamptz()
  delete_at DateTime? @map("delete_at") @db.Timestamptz()

  @@map("menu_mates")
}

// 菜单组表,分组不是子菜单和父菜单的关系
model MenuGroup {
  id        String      @id @unique @map("id") @db.VarChar(36)
  title      String     @db.VarChar(255)
  icon      String     @db.VarChar(255)
  description String    @db.VarChar(255)
  permissions Permission[]
  menus     Menu[]
  create_at DateTime    @default(dbgenerated("NOW()")) @map("create_at") @db.Timestamptz()
  update_at DateTime    @default(dbgenerated("NOW()")) @map("update_at") @db.Timestamptz()
  delete_at DateTime?   @map("delete_at") @db.Timestamptz()

  @@map("menu_groups")
}
