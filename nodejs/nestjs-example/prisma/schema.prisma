generator client {
  provider = "prisma-client-js"
  output   = "./clients/postgresql"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

// 用户表
model User {
  id         String     @id(map: "user_pk") @unique @map("id") @db.VarChar(36)
  name       String     @unique @db.VarChar(50)
  local_part String     @db.VarChar(64)
  domain     String     @db.VarChar(255)
  password   String     @db.VarChar(50)
  profile    Profile?
  tasks      Task[]
  roles      UserRole[]
  createAt   DateTime   @default(dbgenerated("NOW()")) @map("create_at") @db.Timestamptz()
  updateAt   DateTime   @default(dbgenerated("NOW()")) @map("update_at") @db.Timestamptz()
  deleteAt   DateTime   @map("delete_at") @db.Timestamptz()

  @@unique([local_part, domain])
  @@map("users")
}

// 用户信息表
model Profile {
  id           String   @id(map: "profile_pk") @unique @map("id") @db.VarChar(36)
  userId       String   @unique @db.VarChar(36)
  user         User     @relation(fields: [userId], references: [id])
  phone_number String   @db.VarChar(20)
  country_code String   @db.VarChar(5)
  address      String   @db.VarChar(255)
  createAt     DateTime @default(dbgenerated("NOW()")) @map("create_at") @db.Timestamptz()
  updateAt     DateTime @default(dbgenerated("NOW()")) @map("update_at") @db.Timestamptz()
  deleteAt     DateTime @map("delete_at") @db.Timestamptz()

  @@unique([userId, phone_number, country_code])
  @@map("profiles")
}

// 角色表
model Role {
  id          String            @id @db.VarChar(36)
  name        String            @unique @db.VarChar(255)
  description String            @db.VarChar(255)
  users       UserRole[]
  permissions RolePermissions[]
  createAt    DateTime          @default(dbgenerated("NOW()")) @map("create_at") @db.Timestamptz()
  updateAt    DateTime          @default(dbgenerated("NOW()")) @map("update_at") @db.Timestamptz()
  deleteAt    DateTime          @map("delete_at") @db.Timestamptz()

  @@map("roles")
}

// 用户角色表
model UserRole {
  id       String   @id(map: "user_role_pk") @map("id") @db.VarChar(36)
  userId   String   @map("user_id") @db.VarChar(36)
  roleId   String   @map("role_id") @db.VarChar(36)
  role     Role     @relation(fields: [roleId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  createAt DateTime @default(dbgenerated("NOW()")) @map("create_at") @db.Timestamptz()
  updateAt DateTime @default(dbgenerated("NOW()")) @map("update_at") @db.Timestamptz()
  deleteAt DateTime @map("delete_at") @db.Timestamptz()

  @@map("user_roles")
}

// 权限表
model Permission {
  id          String            @id(map: "permission_pk") @map("id") @db.VarChar(36)
  name        String            @unique @db.VarChar(255)
  action      String            @db.VarChar(255)
  description String            @db.VarChar(255)
  roles       RolePermissions[]
  createAt    DateTime          @default(dbgenerated("NOW()")) @map("create_at") @db.Timestamptz()
  updateAt    DateTime          @default(dbgenerated("NOW()")) @map("update_at") @db.Timestamptz()
  deleteAt    DateTime          @map("delete_at") @db.Timestamptz()

  @@map("permissions")
}

// 角色权限表
model RolePermissions {
  id           String     @id(map: "role_permission_pk") @map("id") @db.VarChar(36)
  roleId       String     @map("role_id") @db.VarChar(36)
  permissionId String     @map("permission_id") @db.VarChar(36)
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createAt     DateTime   @default(dbgenerated("NOW()")) @map("create_at") @db.Timestamptz()
  updateAt     DateTime   @default(dbgenerated("NOW()")) @map("update_at") @db.Timestamptz()
  deleteAt     DateTime   @map("delete_at") @db.Timestamptz()

  @@map("role_permissions")
}

model Task {
  id          String   @id @map("id") @db.VarChar(36)
  title       String   @db.VarChar(255)
  description String   @db.VarChar(255)
  completed   Boolean  @default(false)
  userId      String   @map("user_id") @db.VarChar(36)
  user        User     @relation(fields: [userId], references: [id])
  createAt    DateTime @default(dbgenerated("NOW()")) @map("create_at") @db.Timestamptz()
  updateAt    DateTime @default(dbgenerated("NOW()")) @map("update_at") @db.Timestamptz()
  deleteAt    DateTime @map("delete_at") @db.Timestamptz()

  @@map("tasks")
}
